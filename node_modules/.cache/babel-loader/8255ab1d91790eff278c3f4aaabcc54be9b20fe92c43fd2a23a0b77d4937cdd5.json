{"ast":null,"code":"var _jsxFileName = \"/Users/doaa/Desktop/React-To-Do-List/src/components/TodoList.js\",\n  _s = $RefreshSig$();\n// components/TodoList.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodoList = _ref => {\n  _s();\n  let {\n    todos,\n    dispatch\n  } = _ref;\n  const [editMode, setEditMode] = useState(null); // State to track the todo being edited\n  const [editText, setEditText] = useState(\"\"); // State to track the text input for editing\n\n  // Handle entering edit mode\n  const editTodoHandler = (id, currentText) => {\n    setEditMode(id);\n    setEditText(currentText);\n  };\n\n  // Handle saving the edited todo\n  const saveEditHandler = id => {\n    if (editText.trim()) {\n      dispatch({\n        type: \"EDIT_TODO\",\n        payload: {\n          id,\n          newTitle: editText\n        }\n      });\n      setEditMode(null); // Exit edit mode\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"todo-list\",\n    children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"todo-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: todo.completed,\n        onChange: () => dispatch({\n          type: \"TOGGLE_TODO\",\n          payload: todo.id\n        }),\n        className: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), editMode === todo.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editText,\n          onChange: e => setEditText(e.target.value),\n          className: \"edit-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => saveEditHandler(todo.id),\n          className: \"save-button\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setEditMode(null),\n          className: \"cancel-button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `todo-title ${todo.completed ? \"completed\" : \"\"}`,\n          children: todo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => editTodoHandler(todo.id, todo.title),\n          className: \"edit-button\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: \"DELETE_TODO\",\n          payload: todo.id\n        }),\n        disabled: !todo.completed,\n        className: \"delete-button\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"melYxvmvypBnZ9pBekSXbrKMBOY=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoList","_ref","_s","todos","dispatch","editMode","setEditMode","editText","setEditText","editTodoHandler","id","currentText","saveEditHandler","trim","type","payload","newTitle","className","children","map","todo","checked","completed","onChange","fileName","_jsxFileName","lineNumber","columnNumber","value","e","target","onClick","title","disabled","_c","$RefreshReg$"],"sources":["/Users/doaa/Desktop/React-To-Do-List/src/components/TodoList.js"],"sourcesContent":["// components/TodoList.js\nimport React, { useState } from \"react\";\n\nconst TodoList = ({ todos, dispatch }) => {\n  const [editMode, setEditMode] = useState(null); // State to track the todo being edited\n  const [editText, setEditText] = useState(\"\"); // State to track the text input for editing\n\n  // Handle entering edit mode\n  const editTodoHandler = (id, currentText) => {\n    setEditMode(id);\n    setEditText(currentText);\n  };\n\n  // Handle saving the edited todo\n  const saveEditHandler = (id) => {\n    if (editText.trim()) {\n      dispatch({\n        type: \"EDIT_TODO\",\n        payload: { id, newTitle: editText },\n      });\n      setEditMode(null); // Exit edit mode\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map((todo) => (\n        <li key={todo.id} className=\"todo-item\">\n          <input\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => dispatch({ type: \"TOGGLE_TODO\", payload: todo.id })}\n            className=\"checkbox\"\n          />\n\n          {/* Show edit input field if the todo is in edit mode */}\n          {editMode === todo.id ? (\n            <>\n              <input\n                type=\"text\"\n                value={editText}\n                onChange={(e) => setEditText(e.target.value)}\n                className=\"edit-input\"\n              />\n              <button\n                onClick={() => saveEditHandler(todo.id)}\n                className=\"save-button\"\n              >\n                Save\n              </button>\n              <button\n                onClick={() => setEditMode(null)}\n                className=\"cancel-button\"\n              >\n                Cancel\n              </button>\n            </>\n          ) : (\n            <>\n              {/* Display the todo item */}\n              <span\n                className={`todo-title ${todo.completed ? \"completed\" : \"\"}`}\n              >\n                {todo.title}\n              </span>\n              <button\n                onClick={() => editTodoHandler(todo.id, todo.title)}\n                className=\"edit-button\"\n              >\n                Edit\n              </button>\n            </>\n          )}\n\n          {/* Delete button, only enabled if the todo is completed */}\n          <button\n            onClick={() => dispatch({ type: \"DELETE_TODO\", payload: todo.id })}\n            disabled={!todo.completed}\n            className=\"delete-button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}